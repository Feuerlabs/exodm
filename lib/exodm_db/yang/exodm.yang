module exodm {

    namespace "http://feuerlabs.com/exodm";
    prefix exodm;

    import ietf-inet-types {
        prefix inet;
    }

    description "Data model for DM server";

    // INTERNAL INFO!
    // <uid>/groups/<gid>/name
    // <uid>/groups/<gid>/url
    //
    list groups {
	description "Device group information";

	key "gid";

	leaf gid {
	    description "group id";
	    type uint32;
	}

	leaf name {
	    type string;
	}

	leaf notification-url {
	    description "Where to send notifications";
	    type inet:uri;
	}
    }

    // INTERNAL INFO!
    // <uid>/devices/<did>/name    = string()
    // <uid>/devices/<did>/msisdn  = msisdn()
    // <uid>/devices/<did>/imsi    = imsi()
    // <uid>/devices/<did>/imei    = imei()
    // <uid>/devices/<did>/__ck    = uint64()
    // <uid>/devices/<did>/__sk    = uint64()
    // <uid>/devices/<did>/groups[1]/__gid = uint32()
    //
    list devices {
	description "Device information";
	key "did";

	leaf did {
	    description "Device identifer";
	    // internally it must be escaped!
	    type string;
	}

	leaf name {
	    description "Optional device name";
	    type string;
	}

	list groups {
	    description "Device group member ship";
	    key "id";

	    leaf id {
	      description "access index";
	      type uint32;
	    }

	    leaf __gid {
		description "group id";
		type uint32;
	    }
	}

	leaf msisdn {
	    description "phone number used to access device if any";
	    type string;
	}

	leaf imsi {
	    description "simcard identity, used to sign some data";
	    type string;
	}

	leaf imei {
	    description "modem identity number";
	    type string;
	}

	leaf __ck {
	    description "device key";
	    type uint64;
	}

	leaf __sk {
	    description "server key";
	    type uint64;
	}

    }

    // INTERNAL INFO!
    // user/<uname>/fullname      = string()
    // user/<uname>/phone         = string()
    // user/<uname>/email         = string()
    // user/<uname>/skype         = string()
    // user/<uname>/access[<i>].__uid  = uint32()
    // user/<uname>/access[<i>].__gid  = uint32()
    // user/<uname>/access[<i>].__perm = permission()
    //
    list users {
	description "User information";
	key "name";


	leaf name {
	    description "Login name of user, unique";
	    type string;
	}

	leaf fullname {
	    type string;
	}

	leaf phone {
	    type string;
	}

	leaf email {
	    type string;
	}

	leaf skype {
	    type string;
	}

	leaf __password {
	    type string;
	}

	list access {
	    description "Device group access";
	    key "id";

	    leaf id {
	      description "access index";
	      type uint32;
	    }

	    leaf __uid {
	      description "Device owner id";
	      type uint32;
	    }

	    leaf __gid {
	      description "group name";
	      type uint32;
	    }

	    leaf __perm {
	      description "group permissions, r,w or rw";
	      type string;
	    }
	}
    }

    rpc create-config-data {
      description "RPC to create device config data";
      input {
	leaf name {
	  description "Name of the config data set";
	  type string {
	    length "1..32";
	  }
	}
	leaf yang {
	  description "Name of the corresponding yang file - must exist.";
	  type string {
	    length "1..32";
	  }
	}
	anyxml values {
	  description "Configuration values (validated against the yang spec)";
	}
      }

      output {
	leaf result {
	  type enumeration {
	    enum complete {
	      description "Operation has completed successfully.";
	      value 0;
	    }
	    enum name-exists {
	      description "A config data set with that name already exists.";
	      value 1;
	    }
	    enum no-such-yang {
	      description "No yang spec of the given name has been registered.";
	      value 2;
	    }
	    enum validation-error {
	      description "The given values don't match the yang specification.";
	      value 3;
	    }
	  }
	}
      }
    }
}

