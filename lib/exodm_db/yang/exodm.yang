module exodm {

    namespace "http://feuerlabs.com/exodm";
    prefix exodm;

    import ietf-inet-types {
        prefix inet;
    }

    description "Data model for DM server";

    // Result codes used by all requests/replies.
    // Can be augmented by local code in special cases.
    typedef result-code {
        type enumeration {
            enum ok {
                description "Operation has completed successfully.";
                value 0;
            }

            enum permission-denied {
                description "Insufficient privileges to perform operation.";
                value 1;
            }

            enum validation-failed {
                description "An error occurred validating the YANG module.";
                value 2;
            }

            enum object-exists {
                description "An object with the same identifier already exists.";
                value 3;
            }

            enum object-not-found {
                description "No object with the given identifier has been found.";
                value 4;
            }

            enum device-not-found {
                description "No device with the given identifier has been found.";
                value 5;
            }
        }
    }

    // INTERNAL INFO!
    // <uid>/groups/<gid>/name
    // <uid>/groups/<gid>/url
    //
    list groups {
	description "Device group information";

	key "gid";

	leaf gid {
	    description "group id";
	    type uint32;
	}

	leaf name {
	    type string;
	}

	leaf notification-url {
	    description "Where to send notifications";
	    type inet:uri;
	}
    }

    // INTERNAL INFO!
    // <uid>/devices/<did>/name    = string()
    // <uid>/devices/<did>/msisdn  = msisdn()
    // <uid>/devices/<did>/imsi    = imsi()
    // <uid>/devices/<did>/imei    = imei()
    // <uid>/devices/<did>/__ck    = uint64()
    // <uid>/devices/<did>/__sk    = uint64()
    // <uid>/devices/<did>/groups[1]/__gid = uint32()
    //
    list devices {
	description "Device information";
	key "did";

	leaf did {
	    description "Device identifer";
	    // internally it must be escaped!
	    type string;
	}

	leaf name {
	    description "Optional device name";
	    type string;
	}

	list groups {
	    description "Device group member ship";
	    key "id";

	    leaf id {
                description "access index";
                type uint32;
	    }

	    leaf __gid {
		description "group id";
		type uint32;
	    }
	}

	leaf msisdn {
	    description "phone number used to access device if any";
	    type string;
	}

	leaf imsi {
	    description "simcard identity, used to sign some data";
	    type string;
	}

	leaf imei {
	    description "modem identity number";
	    type string;
	}

	leaf __ck {
	    description "device key";
	    type uint64;
	}

	leaf __sk {
	    description "server key";
	    type uint64;
	}

    }

    // INTERNAL INFO!
    // user/<uname>/fullname      = string()
    // user/<uname>/phone         = string()
    // user/<uname>/email         = string()
    // user/<uname>/skype         = string()
    // user/<uname>/access[<i>].__uid  = uint32()
    // user/<uname>/access[<i>].__gid  = uint32()
    // user/<uname>/access[<i>].__perm = permission()
    //
    list users {
	description "User information";
	key "name";


	leaf name {
	    description "Login name of user, unique";
	    type string;
	}

	leaf fullname {
	    type string;
	}

	leaf phone {
	    type string;
	}

	leaf email {
	    type string;
	}

	leaf skype {
	    type string;
	}

	leaf __password {
	    type string;
	}

	list access {
	    description "Device group access";
	    key "id";

	    leaf id {
                description "access index";
                type uint32;
	    }

	    leaf __uid {
                description "Device owner id";
                type uint32;
	    }

	    leaf __gid {
                description "group name";
                type uint32;
	    }

	    leaf __perm {
                description "group permissions, r,w or rw";
                type string;
	    }
	}
    }

    rpc create-device-group {
        description "RPC to create a device group";

        input {
            leaf name {
                description "Group name";

                type string {
                    length "1..32";
                }
            }
            leaf notification-url {
                description "RPC callback notification URL";

                type inet:uri;
            }
        }

        output {
            leaf result {
                type result-code;
            }
            leaf gid {
                description "Group identifier. 0 (zero) if operation failed.";
                type uint32;
            }
        }
    }

    rpc delete-device-group {
        description "RPC to create a device group";

        input {
            leaf gid {
                description "Group ID";
                type uint32;
            }
        }

        output {
            leaf result {
                type result-code;
            }
        }
    }

    rpc list-device-groups {
        description "List device groups, N entries at a time";

        input {
            leaf n {
                description "Number of entries to fetch";
                type uint32;
            }
            leaf previous {
                description "Previous group ID; 0 (zero) if from beginning";
                type uint32;
            }
        }
        output {
            list groups {
                leaf gid {
                    type uint32;
                }
                leaf name {
                    type string;
                }
                leaf callback-url {
                    type inet:uri;
                }
            }
        }
    }

    rpc update-notification-url {
        description "RPC to change the notification URL of an existing group";

        input {
            leaf gid {
                description "Group identifier.";
                type uint32;
            }
            leaf notification-url {
                description "RPC callback notification URL";
                type inet:uri;
            }
        }

        output {
            leaf result {
                type result-code;
            }
        }
    }

    rpc create-yang-module {
        description "RPC to store a YANG module either in user or system space";
        input {
            leaf repository {
                description "Where to store the module: Currently 'system' or 'user'";
                type string {
                    length "1..32";
                }
            }
            leaf name {
                description "Name, including extension, e.g. 'rfzone.yang'";
                type string {
                    length "1..32";
                }
            }
            leaf yang-module {
                description "The actual source of the YANG module specification";
                type string;
            }
        }
        output {
            leaf result {
                type result-code;
            }
        }
    }

    rpc create-config-data {
        description "RPC to create device config data";
        input {
            leaf config-data {
                description "Name of the config data set";
                type string {
                    length "1..32";
                }
            }
            leaf yang {
                description "Name of the corresponding yang file - must exist.";
                type string {
                    length "1..32";
                }
            }
            leaf protocol {
                description "Name of the ExoDM protocol used to talk to the device.";
                type string {
                    length "1..32";
                }
            }
            anyxml values {
                description "Configuration values (validated against the yang spec)";
            }
        }

        output {
            leaf result {
                type result-code;
            }
        }
    }

    rpc update-config-data {
        description "RPC to update existing config data";
        input {
            leaf config-data {
                description "Name of the config data set";
                type string {
                    length "1..32";
                }
            }
            anyxml values {
                description "Configuration values (validated against the yang spec)";
            }
        }

        output {
            leaf result {
                type result-code;
            }
        }
    }

    rpc provision-device {
        description "Create a new device. augment this call if you want to add device-data";
        input {
            leaf dev-id {
                description "Account-wide unqiue device-id";
                type string {
                    length "1..64";
                }
            }
            leaf server-key {
                description "Server key";
                type uint64;
            }
            leaf device-key {
                description "Device key";
                type uint64;
            }
	    leaf msisdn {
	      type string;
	      mandatory false;
	    }
        }

        output {
            leaf result {
                type result-code;
            }
        }
    }

    rpc add-config-data-members {
        description "Create a new device. augment this call if you want to add device-data";
        input {
            leaf-list config-data {
                description "Configuration data instances to associate with the given device(s)";
                type string {
                    length "1..32";
                }
            }
            leaf-list dev-id {
                description "Devices to push the given config data instances to (s)";
                type string {
                    length "1..64";
                }
            }
        }

        output {
            leaf result {
                type result-code;
            }
        }
    }

    rpc push-config-data {
        description "Push the given configuration data to all member devices";
        input {
            leaf config-data {
                description "Configuration data to push.";
                type string {
                    length "1..32";
                }
            }
        }

        output {
            leaf result {
                type result-code;
            }
        }
    }
}
