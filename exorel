#!/usr/bin/env escript
%% -*- erlang -*-

-mode(compile).
-compile({no_auto_import,[nodes/1]}).

-define(TARGET, "exodm").

main([]) -> help();
main([F|Args] = _A) ->
    %% this insanity with 're' is because my terminal sometimes passes
    %% a non-space space character appended to the command.
    try list_to_existing_atom(
	   re:replace(F, "[^a-z_]", "", [global,{return,list}])) of
	tar      -> tar(Args);
	git_vsn  -> git_vsn(Args);
	nodes    -> nodes(Args);
	versions -> versions(Args);
	current  -> current(Args);
	last_build -> last_build(Args);
	_ -> help()
    catch
	_:_ ->
	    help()
    end.

help() ->
    io:fwrite(
"Usage: ~s Cmd [Opts]~n"
"Valid commands and options:~n"
"  git_vsn    : prints the git version of the repos top directory.~n"
"  nodes      : prints the names of the currently defined nodes.~n"
"  versions   : prints all currently installed versions.~n"
"  current    : prints the version set as 'current', if there is one;~n"
"               otherwise, marks the latest installed version as current.~n"
"  current V  : marks the installed version (matching) V as current.~n"
"  last_build : prints the version of the system most recently generated.~n",
      [filename:basename(escript:script_name())]),
    halt(1).

tar([V]) ->
    Base = "exodm_" ++ V,
    Top = filename:join(Dir = rel_lib_dir(), Base),
    Target0 = filename:join(Dir, Base ++ ".tgz"),
    Target = filename:absname(Target0),
    case filelib:is_regular(Target0) of
	false ->
	    TmpDir = make_temp_dir(),
	    io:fwrite("TmpDir: ~s~n", [os:cmd("ls -R " ++ TmpDir)]),
	    Res = os:cmd(Cmd = "cp -r " ++ Top ++ " " ++
			     TmpDir ++ "/" ++ rel_path()),
	    io:fwrite("~s ->~n  ~s~n", [Cmd, Res]),
	    NewDir = filename:join([TmpDir, rel_path(), Base]),
	    io:fwrite("NewDir = ~s~n", [NewDir]),
	    Res1 = os:cmd(Cmd1 = "(cd " ++ root_dir() ++ "; "
			  "cp exorel make_node " ++ NewDir ++ "/)"),
	    io:fwrite("~s ->~n  ~s~n", [Cmd1, Res1]),
%%	    TmpTop = filename:join(TmpDir, Base),
	    {ok,_} = beam_lib:strip_release(NewDir),
	    make_tar(TmpDir, "*", Target),
	    %% TarRes = os:cmd(TarCmd = "tar czf " ++ Target ++ " " ++ TmpTop),
	    %% io:fwrite("~s ->~n~s~n", [TarCmd, TarRes]),
	    os:cmd("rm -rf " ++ TmpDir),
	    io:fwrite("Stripped archive in ~s~n", [Target0]);
	true ->
	    abort("Archive exists [~s]~n", [Target0])
    end.

rel_path() ->
    "rel/lib".

make_tar(Dir, SubDir, Target) ->
    {ok, Cwd} = file:get_cwd(),
    ok = file:set_cwd(Dir),
    TarRes = os:cmd(TarCmd = "tar czf " ++ Target ++ " " ++ SubDir),
    io:fwrite("~s ->~n~s~n", [TarCmd, TarRes]),
    file:set_cwd(Cwd).


make_temp_dir() ->
    {M,S,U} = os:timestamp(),
    D = filename:join("/tmp", lists:concat([escript:script_name(),"-",
					    integer_to_list(M),".",
					    integer_to_list(S),".",
					    integer_to_list(U)])),
    ok = file:make_dir(D),
    ok = filelib:ensure_dir(filename:join([D, rel_path(), "foo"])),
    D.

git_vsn([V]) -> io:fwrite("~s~n", [V]);
git_vsn(Opts) ->
    case os:getenv("EXO_VSN") of
	[_|_] = Vsn ->
	    io:fwrite("~s~n", [Vsn]);
	_ ->
	    {ok, Cwd} = file:get_cwd(),
	    Dir = case Opts of
		      [] -> root_dir();
		      ["-d",D|_] -> D
		  end,
	    ok = file:set_cwd(Dir),
	    Res = os:cmd("git describe --always --tags "
			 "`git log -n 1 --pretty=format:%h .`"),
	    file:set_cwd(Cwd),
	    io:fwrite("~s~n", [re:replace(Res,"\\n","",[{return,list}])])
    end.

nodes([]) ->
    case file:list_dir(Dir = filename:join(root_dir(), "nodes")) of
	{ok, Fs} ->
	    list_files(Fs, Dir);
	_ ->
	    nothing
    end.

versions([]) ->
    case file:list_dir(Dir = rel_lib_dir()) of
	{ok, Fs} ->
	    list_files(Fs, Dir);
	_ ->
	    nothing
    end.

current([]) ->
    case file:read_link(filename:join(rel_dir(), ?TARGET)) of
	{ok, Vsn} ->
	    io:fwrite("~s~n", [vsn_part(Vsn)]);
	{error, enoent} ->
	    case file:list_dir(rel_lib_dir()) of
		{ok, []} -> nothing;
		{ok, Fs} ->
		    [Latest|_] = lists:reverse(sort_vsns(Fs)),
		    make_current(Latest),
		    io:fwrite("~s~n", [vsn_part(Latest)]);
		_ ->
		    nothing
	    end
    end;
current([Vsn]) ->
    case file:list_dir(rel_lib_dir()) of
	{ok, Fs} ->
	    case [F || F <- Fs -- "exodm", vsn_matches(Vsn, F)] of
		[ActualVsn] ->
		    current_(ActualVsn);
		[] ->
		    io:fwrite("error: no such version~n", []),
		    halt(1);
		[_|_] = Multiple ->
		    case lists:member(Actual = "exodm_" ++ Vsn, Multiple) of
			true ->
			    current_(Actual);
			false ->
			    io:fwrite("error: ambiguous~n", []),
			    halt(1)
		    end
	    end;
	_ ->
	    io:fwrite("error: no such version~n", []),
	    halt(1)
    end.

current_(ActualVsn) ->
    file:delete(filename:join(rel_dir(), ?TARGET)),
    make_current(filename:join(rel_lib_dir(), ActualVsn)),
    io:fwrite("~s~n", [vsn_part(ActualVsn)]).


vsn_part(F) ->
    case re:split(Base = filename:basename(F), "_", [{return,list}]) of
	[_, V] -> V;
	_ -> Base
    end.

last_build(_) ->
    case file:consult(filename:join(rel_dir(), "reltool.config")) of
	{ok, Terms} ->
	    case [Sys || {sys, Sys} <- Terms] of
		[Items|_] ->
		    [Version] = [V || {rel,T,V,_} <- Items, T == ?TARGET],
		    io:fwrite("~s~n", [Version]);
		_ ->
		    nothing
	    end;
	_ ->
	    nothing
    end.

vsn_matches(V, FullV) ->
    case re:run(FullV, V) of
	{match,_} -> true;
	nomatch   -> false
    end.

make_current(F) ->
    {ok, Cwd} = file:get_cwd(),
    RelD = rel_dir(),
    LibD = rel_lib_dir(),
    Base = filename:basename(F),
    CwdRes1 = file:set_cwd(RelD),
    io:fwrite("CwdRes(~p) = ~p~n", [RelD, CwdRes1]),
    io:fwrite("-- now in ~p~n", [element(2, file:get_cwd())]),
    Res = file:make_symlink(Source1 = filename:join("lib", Base), ?TARGET),
    io:fwrite("make_symlink(Dir = ~p, ~p, ~p) -> ~p~n",
	      [RelD, Source1, ?TARGET, Res]),
    CopyRes = file:copy(
		RT = filename:join(Source1, "reltool.config"), "reltool.config"),
    io:fwrite("Copy ~s to reltool.config -> ~p~n", [RT, CopyRes]),
    file:set_cwd(Cwd),
    CwdRes2 = file:set_cwd(rel_lib_dir()),
    DelRes = file:delete(?TARGET),
    io:fwrite("deleting file ~p -> ~p~n", [?TARGET, DelRes]),
    Res2 = file:make_symlink(Base, ?TARGET),
    io:fwrite("make_symlink(Dir = ~p, ~p, ~p) -> ~p~n",
	      [LibD, Base, ?TARGET, Res2]),
    io:fwrite("CwdRes(~p) = ~p~n", [rel_lib_dir(), CwdRes2]),
    file:set_cwd(Cwd).

    %% make_current_(rel_dir(), Source),
    %% make_current_(rel_lib_dir(), Source),
    %% file:set_cwd(Cwd),
    %% file:set_cwd(filename:dirname(filename:absname(F))),
    %% file:make_symlink(filename:basename(F), filename:join("..", ?TARGET)),
    %% file:set_cwd(Cwd).

%% make_current_(Dir, SourceDir) ->
%%     CwdRes = file:set_cwd(Dir),
%%     io:fwrite("CwdRes = ~p~n", [CwdRes]),
%%     io:fwrite("-- now in ~p~n", [element(2, file:get_cwd())]),
%%     Res = file:make_symlink(SourceDir, B = ?TARGET),
%%     io:fwrite("make_symlink(Dir = ~p, ~p, ~p) -> ~p~n", [Dir, SourceDir, B, Res]),
%%     Res.


list_files(Fs0, Dir) ->
    case [F1 || F1 <- lists:sort(Fs0),
		filelib:is_dir(filename:join(Dir, F1)),
		F1 =/= "exodm"] of
	[F|Fs] ->
	    io:fwrite("~s~n", [F ++ lists:concat(["," ++ F1 || F1 <- Fs])])
    end.

root_dir() ->
    filename:dirname(escript:script_name()).

rel_dir() ->
    filename:join(root_dir(), "rel").

rel_lib_dir() ->
    filename:join(rel_dir(), "lib").

%% modified version of setup:sort_vsns/2
sort_vsns(Rels) ->
    lists:sort(fun(Ra, Rb) ->
                       compare_vsns(take_vsn(Ra), take_vsn(Rb))
               end,
               Rels).

take_vsn(R) ->
    case re:split(R, "_", [{return,list}]) of
	[_, V] ->
	    V;
	_ ->
	    R
    end.

compare_vsns(V1, V2) ->
    ToS = fun(V) ->
                  [pad_x(X) || X <- string:tokens(V, ".")]
          end,
    ToS(V1) < ToS(V2).

pad_x(X) ->
    S = if is_integer(X) -> integer_to_list(X);
           true -> X
        end,
    lists:duplicate(30 - length(S), $0) ++ [flip(C) || C <- S].

flip(C) when $a =< C, C =< $z -> $A + (C - $a);
flip(C) when $A =< C, C =< $Z -> $a + (C - $A);
flip(C) -> C.


abort(Fmt, Args) ->
    io:fwrite(Fmt, Args),
    halt(1).
